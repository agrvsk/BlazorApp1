@page "/todoForm"
@using System.ComponentModel.DataAnnotations
@using BlazorApp1.Server.Data
@using BlazorApp1.Server.Entities
@using BlazorApp1.Server.Services
@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Identity

@rendermode InteractiveServer

@inject NavigationManager Navigation
@inject ITodoService todoService

@inject UserManager<ApplicationUser> UserManager
@inject AuthenticationStateProvider AuthenticationStateProvider


<h3>TodoForm</h3>

<AuthorizeView>
    Hello @context.User.Identity?.Name!
</AuthorizeView>

<EditForm class="form-horizontal" Model=@Editing OnSubmit=@FormSubmitted FormName="Register">
    <DataAnnotationsValidator/>
    @*
    <div>
        <label for="id">Id:</label>
        <InputNumber @bind-Value="Editing.Id" id="id" ></InputNumber>
    </div>
    *@
    <div>
@*
        <label class="control-label" for="title">Title:</label>
*@
        <InputText class="form-control" @bind-Value="Editing.Title" id="title" placeholder="Title" />
        <ValidationMessage For="@(() => Editing.Title)" />
    </div>
    <div>
        @*
        <label class="control-label" for="descr">Description:</label>
        *@
        <InputText class="form-control" @bind-Value="Editing.Description" id="descr" placeholder="Description"></InputText>
        <ValidationMessage For="@(() => Editing.Description)" />
    </div>

    <button class="@ButtonKlass" type="submit" disabled="@isProcessing">Skicka</button>
    <input class="@ButtonKlass" type="button" disabled="@isProcessing" value="GoBack" @onclick="GoBack" />

    <ValidationSummary></ValidationSummary>

</EditForm>





@code {
    private bool isProcessing = false;
    private IdentityUser currentUser;
    private string currentUserName="N/A";
    private string ButtonKlass = "btn-primary mt-3";

    private async Task FormSubmitted(EditContext editContext)
    {
        if (isProcessing) return;

        bool formIsValidated = editContext.Validate();
        if(formIsValidated)
        {
            isProcessing = true;
            ButtonKlass = "btn-secondary mt-3";

            StateHasChanged();
            await Task.Delay(200);

            var currentEdit = (Todo)editContext.Model;
            //var cpyTodo = (Todo) currentEdit.Clone();
            // Post to api
            //GlobalVars.MyToDolist.Add(cpyTodo);
            currentEdit.Id = 0;
            currentEdit.AssignedTo = currentUserName;
            await todoService.SaveTodoAsync(currentEdit);
            //StateHasChanged();
            //todoService.GetById();
            //currentEdit.Id++;
            //currentEdit.Title = "";
            //currentEdit.Description = "";
        }
        isProcessing = false;
        ButtonKlass = "btn-primary mt-3";

    }



    protected override async Task OnInitializedAsync()
    {
        
        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            currentUser = await UserManager.GetUserAsync(user);
            currentUserName = currentUser.UserName;
            Console.WriteLine($"Logged in as: {currentUser.UserName}");
        }
        

        @*
        Editing.Id = GlobalVars.MyToDolist.Any() 
        ? GlobalVars.MyToDolist.Max(o => o.Id) + 1
        : 1;
        *@
    }
    public void GoBack()
    {
        Navigation.NavigateTo("todoList");
        StateHasChanged();
    }


    public Todo Editing = new();

}
